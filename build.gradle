plugins {
    id 'application'
    id 'org.hidetake.ssh' version '2.10.1'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()

    maven {
        url('https://frcmaven.wpi.edu/artifactory/release')
    }
}

remotes {
    target {
        host = "$DEPLOY_HOST"
        user = "$DEPLOY_USER"

        if (project.hasProperty('targetPassword')) {
            password = project.property('targetPassword')
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: project.file('libs'))

    implementation "com.google.code.gson:gson:2.8.5"

    implementation group: "edu.wpi.first.thirdparty.frc${YEAR}.opencv", name: 'opencv-java', version: "$OPENCV_VERSION"
    implementation group: "edu.wpi.first.thirdparty.frc${YEAR}.opencv", name: 'opencv-jni', version: "$OPENCV_VERSION", classifier: "$REMOTE_ARCH"

    implementation "edu.wpi.first.wpilibj:wpilibj-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.cscore:cscore-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.ntcore:ntcore-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$WPILIB_VERSION"
    implementation group: 'edu.wpi.first.cscore', name: 'cscore-jni', version: "$WPILIB_VERSION", classifier: "$REMOTE_ARCH"
    implementation group: 'edu.wpi.first.ntcore', name: 'ntcore-jni', version: "$WPILIB_VERSION", classifier: "$REMOTE_ARCH"
}

application {
    mainClassName = 'main.Main'
    applicationName = 'frcvision'
}

run {
    args project.file('frc.json').absolutePath
}

task deploy {
    dependsOn tasks.build
    doLast {
        ssh.run {
            session(remotes.target) {
                def distributionName = "${application.applicationName}.zip"

                // delete old version
                execute "rm -rf ${DEPLOY_PATH}/${application.applicationName}"

                // upload new code
                put from: "${project.buildDir}/distributions/${distributionName}", into: "$DEPLOY_PATH"
                execute "unzip ${DEPLOY_PATH}/${distributionName}"
            }
        }
    }
}

task runRemote {
    dependsOn tasks.deploy
    doLast {
        ssh.run {
            session(remotes.target) {
                execute "cd ${DEPLOY_PATH}/${application.applicationName}"
                execute "./bin/${application.applicationName}"
            }
        }
    }
}
